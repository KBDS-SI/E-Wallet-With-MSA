★★★★★★잘못된 내용이 있을 수도 있음!!참고..★★★★★★

먼저 깃은 기본적으로 메인 밑에 수많은 가지(branch)를 만든다고 생각하면 됨.
			main
		branch1	   branch2    branch3 ·······

최종적으로 default인 메인이 실제 운영까지 간다고 생각하면 됨.
(대부분 master라고 되있는데 Black Lives Matter 운동으로 인한 master/slave라는 단어를 사용하지 말고 main으로 변경했다는 그런 얘기~)
★★★결론은 master -> main으로 변경됨.★★★


★★★기본 세팅★★★
git init(해당 폴더를 작업디렉토리로 만든다. 최초한번만 수행)
git remote add origin https://github.com/어쩌구url주소 - 내 작업디렉토리와 깃의 저장소를 연결한다.
git remote -v - 저장소 연결 확인

git branch "test" - test라는 브랜치를 만듦.(자기꺼 만들기)
git checkout "test" - test라는 브랜치로 checkout. 체크아웃할 경우 해당 브랜치안에서 작업을 한다고 생각하면됨. 그 다음에는 다 수정후 메인에 넣을 때, merge작업을 수행함.
이건 기본적으로 설정 후 작업


깃의 간단한 구조

작업 디렉토리(현재 작업중인 곳) - 스테이징 영역(add 진행시 올라가는 곳 staged area) - commit시 변경이력 저장 - 

기본 명령어
git add [파일경로]     - 해당 파일경로에 있는 변경 내용을 스테이징 영역으로 넘김.
git add .                 - 현재 디렉토리(하위디렉토리 포함)에 있는 모든 변경 내용을 스테이징 영역으로 넘김.
git add -A               - 작업 디렉토리에 있는 모든 변경 내용을 변경 내용을 스테이징 영역으로 넘김.(루트에서 수행하는거랑 같음)
git add -p	    - 변경사항을 하나씩 보면서 넘기거나 제외함.


상태보기
git status - 작업디렉토리와 스테이징 영역 상태를 확인하기 위해 사용
Changes to be committed: 이 영역은 스테이징 영역에 넘어가 있는 변경 내용을 보여줍니다.
Changes not staged for commit: 이 영역은 아직 작업 디렉토리에 있는 변경 내용을 보여줍니다.
Untracked files: 이 영역도 아직 작업 디렉토리에 있는 아직 한 번도 해당 Git 저장소가 관리한 적이 없는 새로운 파일을 보여줍니다.


변경이력 저장(체크인)
git commit -m "변경내용(comment)" - add를 한 파일(스테이징영역에 있는 파일)을  git 저장소 변경이력에 저장한다.
			          - add를 한 후 작업디렉토리에서 파일을 수정할 경우 commit을 해도 수정한 내용은 commit되지않는다.
			          - add를 한 기준으로 commit이 수행 됨.(내가 많이 착각해서 씀)
